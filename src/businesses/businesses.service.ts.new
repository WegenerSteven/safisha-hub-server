import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Business } from './entities/business.entity';
import { BusinessHours } from './entities/business-hours.entity';
import { CreateBusinessDto } from './dto/create-business.dto';
import { UpdateBusinessDto } from './dto/update-business.dto';
import { UsersService } from '../users/users.service';
import { LocationsService } from '../location/locations.service';

@Injectable()
export class BusinessesService {
  constructor(
    @InjectRepository(Business)
    private businessRepository: Repository<Business>,
    
    @InjectRepository(BusinessHours)
    private businessHoursRepository: Repository<BusinessHours>,
    
    private usersService: UsersService,
    private locationService: LocationsService,
  ) {}

  async create(createBusinessDto: CreateBusinessDto): Promise<Business> {
    // Verify user exists
    try {
      await this.usersService.findOne(createBusinessDto.user_id);
    } catch (error) {
      throw new NotFoundException(
        `User with ID ${createBusinessDto.user_id} not found`,
      );
    }

    // Create business entity
    const business = new Business();
    business.user_id = createBusinessDto.user_id;
    business.name = createBusinessDto.name;
    business.type = createBusinessDto.type;
    business.description = createBusinessDto.description;
    business.address = createBusinessDto.address;
    business.city = createBusinessDto.city;
    business.state = createBusinessDto.state;
    business.zip_code = createBusinessDto.zip_code;
    business.phone = createBusinessDto.phone;
    business.email = createBusinessDto.email;
    
    // Handle optional fields
    if (createBusinessDto.image) {
      business.image = createBusinessDto.image;
    }
    
    if (createBusinessDto.location_id) {
      business.location_id = createBusinessDto.location_id;
    }

    // Save business first to get the ID
    const savedBusiness = await this.businessRepository.save(business);

    // Create and save business hours
    if (createBusinessDto.operating_hours) {
      const businessHours = new BusinessHours();
      businessHours.business_id = savedBusiness.id;
      businessHours.hours = createBusinessDto.operating_hours;
      await this.businessHoursRepository.save(businessHours);
    }

    // Return the business with all related data
    return this.findOne(savedBusiness.id);
  }

  async findAll(): Promise<Business[]> {
    return this.businessRepository.find({
      relations: ['user', 'location', 'operating_hours'],
    });
  }

  async findOne(id: string): Promise<Business> {
    const business = await this.businessRepository.findOne({
      where: { id },
      relations: ['user', 'location', 'operating_hours'],
    });

    if (!business) {
      throw new NotFoundException(`Business with ID ${id} not found`);
    }

    return business;
  }

  async findByUserId(userId: string): Promise<Business> {
    const business = await this.businessRepository.findOne({
      where: { user_id: userId },
      relations: ['user', 'location', 'operating_hours'],
    });

    if (!business) {
      throw new NotFoundException(`Business for user with ID ${userId} not found`);
    }

    return business;
  }

  async update(id: string, updateBusinessDto: UpdateBusinessDto): Promise<Business> {
    // Get existing business
    const business = await this.findOne(id);
    
    // Update business properties - only update fields that are provided
    if (updateBusinessDto.name !== undefined) business.name = updateBusinessDto.name;
    if (updateBusinessDto.type !== undefined) business.type = updateBusinessDto.type;
    if (updateBusinessDto.description !== undefined) business.description = updateBusinessDto.description;
    if (updateBusinessDto.address !== undefined) business.address = updateBusinessDto.address;
    if (updateBusinessDto.city !== undefined) business.city = updateBusinessDto.city;
    if (updateBusinessDto.state !== undefined) business.state = updateBusinessDto.state;
    if (updateBusinessDto.zip_code !== undefined) business.zip_code = updateBusinessDto.zip_code;
    if (updateBusinessDto.phone !== undefined) business.phone = updateBusinessDto.phone;
    if (updateBusinessDto.email !== undefined) business.email = updateBusinessDto.email;
    if (updateBusinessDto.image !== undefined) business.image = updateBusinessDto.image;
    if (updateBusinessDto.location_id !== undefined) business.location_id = updateBusinessDto.location_id;
    
    // Update operating hours if provided
    if (updateBusinessDto.operating_hours && business.operating_hours) {
      business.operating_hours.hours = updateBusinessDto.operating_hours;
      await this.businessHoursRepository.save(business.operating_hours);
    }
    
    // Save updated business
    return this.businessRepository.save(business);
  }

  async remove(id: string): Promise<void> {
    const business = await this.findOne(id);
    await this.businessRepository.remove(business);
  }
}
